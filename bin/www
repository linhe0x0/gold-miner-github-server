#!/usr/bin/env node

/**
 * Module depndencies.
 */
const http = require('http')

const app = require('../app')
const config = require('../config')

/**
 * Get port from environment and store in Koa.
 */
const port = normalizePort(config.port || '3000')

/**
 * Create HTTP server.
 */
const server = http.createServer(app.callback())

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, '127.0.0.1')
server.on('error', onError)
server.on('listening', onListening)

/**
 * normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + 'requires elevated privileges.')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + 'is already in use.')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port

  if (process.env.NODE_ENV === 'testing') return

  console.log('Listening on ' + bind)

  if (config.debug) {
    console.log(`You can open http://127.0.0.1:${addr.port} now.`)
  }
}

module.exports = server
